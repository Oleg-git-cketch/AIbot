import telebot
import logging
import requests
import json
import time
from buttons import menu_kb, role_kb, model_kb

TELEGRAM_TOKEN = "7952352811:AAEqgtz9v94gFEWoFnLHiTEZYGI2Q7AJylQ"
OPENROUTER_API_KEY = "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"

bot = telebot.TeleBot(TELEGRAM_TOKEN)
bot.remove_webhook()

user_roles = {}
user_model = {}

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(
    level=logging.INFO,
    filename='bot_errors.log',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s'
)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò:", reply_markup=menu_kb())

@bot.message_handler(commands=['role'])
def role_command(message):
    user_id = message.from_user.id
    bot.send_message(user_id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å:', reply_markup=role_kb())

@bot.message_handler(commands=['model'])
def model_command(message):
    user_id = message.from_user.id
    bot.send_message(user_id, 'ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è:', reply_markup=model_kb())

@bot.callback_query_handler(func=lambda call: call.data == "roles")
def role(call):
    user_id = call.from_user.id
    bot.send_message(user_id, 'üß† –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å:', reply_markup=role_kb())

@bot.callback_query_handler(func=lambda call: call.data == "model")
def model(call):
    user_id = call.from_user.id
    bot.send_message(user_id, 'ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è:', reply_markup=model_kb())

@bot.callback_query_handler(func=lambda call: call.data.startswith('model_'))
def set_model(call):
    user_id = call.from_user.id

    model_map = {
        "model_gpt4o": "openai/gpt-4o",
        "model_deepseek": "deepseek/deepseek-r1-0528-qwen3-8b:free",
        "model_gemini": "google/gemini-2.5-flash-preview-05-20"
    }

    model_id = model_map.get(call.data, "openai/gpt-4o")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é GPT-4o
    user_model[user_id] = model_id

    bot.send_message(user_id, f'‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞: {model_id}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

@bot.callback_query_handler(func=lambda call: call.data.startswith('role_'))
def set_role(call):
    role = call.data.replace('role_', '')
    user_id = call.from_user.id
    user_roles[user_id] = role

    bot.send_message(user_id, f"üé≠ –†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "start")
def start_ai(call):
    prompt = "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
    user_id = call.from_user.id
    role = user_roles.get(user_id, "assistant")
    model = user_model.get(user_id, "openai/gpt-4o")

    ask_ai(call.message.chat.id, prompt, call.message, role, model)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    prompt = message.text
    user_id = message.from_user.id
    role = user_roles.get(user_id, 'assistant')
    model = user_model.get(user_id, 'openai/gpt-4o')
    ask_ai(message.chat.id, prompt, message, role, model)

def ask_ai(chat_id, prompt, message, role, model):
    user_id = message.from_user.id
    username = message.from_user.username

    system_roles = {
        'assistant': f"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∫—Ä–∞—Ç–∫–æ –∏ –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}",
        'teacher': f"–¢—ã —Å—Ç—Ä–æ–≥–∏–π, —É–º–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –æ–±—ä—è—Å–Ω—è—é—â–∏–π –≤—Å—ë –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}",
        'shutnik': f"–¢—ã –≤–µ—Å—ë–ª—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –≤—Å—ë –æ—Ç–≤–µ—á–∞–µ—Ç —Å —é–º–æ—Ä–æ–º –∏ —à—É—Ç–∫–∞–º–∏. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}"
    }

    system_msg = system_roles.get(role, f"–¢—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ—â–Ω–∏–∫. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

    data = {
        "model": model,
        "max_tokens": 1000,
        "messages": [
            {"role": "system", "content": system_msg},
            {"role": "user", "content": prompt}
        ]
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            data=json.dumps(data),
            timeout=20
        )
        response.raise_for_status()
        reply = response.json()['choices'][0]['message']['content']
    except requests.exceptions.RequestException as e:
        logging.exception(f"[API ERROR] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenRouter –¥–ª—è user_id {user_id}: {e}")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    except Exception as e:
        logging.exception(f"[PARSE ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        reply = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò."

    try:
        bot.send_message(chat_id, reply)
    except Exception as e:
        logging.exception(f"[SEND ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)
